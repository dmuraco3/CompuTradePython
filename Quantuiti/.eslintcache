[{"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/index.js":"1","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/app.js":"2","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/HandleLogin/index.js":"3","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/dashboard/index.js":"4","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/auth/index.js":"5","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/HandleSignUp/index.js":"6"},{"size":221,"mtime":1615312917615,"results":"7","hashOfConfig":"8"},{"size":6259,"mtime":1615317669435,"results":"9","hashOfConfig":"8"},{"size":5231,"mtime":1615317170451,"results":"10","hashOfConfig":"8"},{"size":7952,"mtime":1615312917563,"results":"11","hashOfConfig":"8"},{"size":338,"mtime":1615312917503,"results":"12","hashOfConfig":"8"},{"size":9455,"mtime":1615316417103,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1xqcqrt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/index.js",[],["29","30"],"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/app.js",["31","32","33","34","35","36"],"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/HandleLogin/index.js",["37","38"],"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/dashboard/index.js",["39","40","41","42","43","44","45","46"],"import React, {useState, useEffect} from 'react'\nimport {Nav, Image} from 'react-bootstrap'\nimport {authFetch} from '../auth'\nimport Loader from 'react-loader-spinner'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\nimport Editor from '@monaco-editor/react'\nimport {FaChevronLeft, FaChevronRight, FaFolderOpen, FaColumns, FaQuestionCircle, FaCog} from 'react-icons/fa'\n\n\nexport default function Dashboard() {\n  const [loading, setLoading] = useState(true)\n  const [projects, setProjects] = useState([])\n  const [loadedProjects, setLoadedProjects] = useState({})\n  const [Message, setMessage]  = useState('')\n  const [projectName, setProjectName] = useState('')\n  const [editorValue, setEditorValue] = useState('')\n  const [mainCode, setMainCode] = useState('')\n  const pages = [\n    {\n      page: \"Dashboard\",\n      icon: FaColumns\n    },\n    {\n      page: \"Projects\",\n      icon: FaFolderOpen\n    },\n    {\n      page: \"Help\",\n      icon: FaQuestionCircle\n    },\n    {\n      page: 'Settings',\n      icon: FaCog\n    }\n  ]\n  const [activePage, setActivePage] = useState('Dashboard')\n  const [activeProject, setActiveProject] = useState('')\n  const [username, setUsername] = useState('')\n  const [PFP, setPFP] = useState('')\n  const [mainCollapsed, setMainCollapsed] = useState(false)\n\n  function handleEditorChange(value, event) {\n    setEditorValue(Array(value))\n    let temp = loadedProjects\n    temp[activeProject] = value\n    setLoadedProjects(temp)\n  }\n\n  const handleProjectNameChange = (e) => {\n    setProjectName(e.target.value)\n  }\n\n  function saveProject(projectName){\n    const opts = {\n      projectName: projectName,\n      value: editorValue\n    };\n    authFetch(\"/api/dashboard/saveproject\", {\n      method: \"POST\",\n      body: JSON.stringify(opts)\n    })\n      .then((response) => {\n        if (response.status === 401) {\n          setMessage(\"Sorry you aren't authorized!\");\n          return null;\n        }\n        return response.json();\n      })\n      .then((response) => {\n        if (response ) {\n          console.log(response)\n        }\n      });\n  }\n\n  function projectInfo(project_name) {\n    if(loadedProjects[project_name]){\n      setMainCode(loadedProjects[project_name])\n      setActiveProject(project_name)\n    } else {\n      const url  = `/api/dashboard/project/${project_name}`\n      authFetch(url, {\n        method: \"GET\"\n      })\n        .then((response) => {\n          if (response.status === 401) {\n            setMessage(\"Sorry you aren't authorized!\");\n            return null;\n          }\n          return response.json();\n        })\n        .then((response) => {\n          if (response ) {\n            setMainCode(response.code)\n            setActiveProject(project_name)\n            let temp = loadedProjects\n            temp[project_name] = response.code\n            setLoadedProjects(temp)\n          }\n        });\n    }\n  }\n\n  const newProject = () => {\n    const opts = {\n      projectName: projectName\n    };\n    authFetch(\"/api/dashboard/newproject\", {\n      method: \"POST\",\n      body: JSON.stringify(opts)\n    })\n      .then((response) => {\n        if (response.status === 401) {\n          setMessage(\"Sorry you aren't authorized!\");\n          return null;\n        }\n        return response.json();\n      })\n      .then((response) => {\n        if (response ) {\n          setProjects(response.projects);\n        }\n      });\n  }\n\n  useEffect(() => {\n    if(projects[0]===undefined){\n      console.log(projects)\n      authFetch(\"/api/dashboard\")\n        .then((response) => {\n          if (response.status === 401) {\n            setMessage(\"Sorry you aren't authorized!\");\n            return null;\n          }\n          return response.json();\n        })\n        .then((response) => {\n          if (response ) {\n            import(`../../assets/pfp${'/default/iconfinder_man_male_avatar_portrait_4043260.png'}`).then(image => {\n              setPFP(image.default)\n              setUsername(response.username)\n              console.log(image)\n              console.log(\"called image\")\n              setProjects(response.projects);\n            })\n          }\n        });\n    }\n  }, [loading, setLoading, projects, setProjects]);\n\n\n  return (\n    <div>\n      {projects===[] ?\n        <div>\n          <h1>loading</h1> \n          <Loader\n            type=\"Rings\"\n            color=\"00BFFF\"\n            height={100}\n            width={100}\n          />\n\n        </div>\n        :\n        <div className=\"MainDashboard\">\n            \n          {!mainCollapsed ?\n            <div className=\"MainNavOpen\">\n              <Image\n                src={PFP}\n                width=\"100px\"\n                height=\"100px\"\n              />\n              <span className=\"Username\" style={{fontSize: 20, textAlign: 'center'}}>{username}</span>\n              {pages.map((object, index) => (\n                <a \n                  className=\"descriptor\"\n                  onClick={() => {\n                    setActivePage(object.page)\n                  }}\n                >\n                  <span\n                    className={object.page===activePage ? \"ActiveNavButton\" : \"NavButton\"}\n                  >\n                    {<object.icon />}\n                  </span>  \n                \n                {object.page}</a>\n              ))}\n              <hr color=\"#555\" style={{width: \"100%\"}}/>\n              <span style={{color: \"white\"}}>Latest Projects</span>\n              {projects.map((name, index) => (\n                <span style={{display: \"block\", width: \"100%\", color: \"white\", textAlign: \"center\"}}>{name}</span>\n              ))}\n\n              <a className=\"collapseNav\" onClick={() => {\n                setMainCollapsed(true)\n              }} ><FaChevronLeft className=\"ICON\" /> </a>\n            </div>\n            :\n            <div className=\"MainNavClose\">\n              {pages.map((object, index) => (\n                <a \n                  className={object.page===activePage ? \"ActiveNavButton\" : \"CloseNavButton\"}\n                  onClick={() => {\n                    setActivePage(object.page)\n                  }}\n                >{<object.icon />}</a>\n              ))}\n              <a className=\"collapseNav\" onClick={() => {\n                setMainCollapsed(false)\n              }} ><FaChevronRight className=\"ICON\" /> </a>\n            </div>\n          }\n\n          <Nav className=\"flex-column projects\">\n            <h1>projects</h1> \n            {projects.map((project, index) => (\n              <Nav.Link \n                className=\"ProjectLink\"\n                key={index}\n                style={activeProject===project?{backgroundColor:\"#333\"}:{background: \"none\"}}\n                onClick = {() => {\n                  if(activeProject !== project){\n                    projectInfo(project)\n                    setActiveProject(project)\n                  }\n                }}\n              >{project}</Nav.Link>\n            ))}\n          </Nav>\n          {/* <form onSubmit={newProject}>\n            <label >Project Name:</label>\n            <br></br>\n            <input name=\"projectName\" placeholder=\"Example\" onChange={handleProjectNameChange}/>\n            <button type=\"submit\">New Project</button>\n          </form> */}\n          {/* <button onClick={() => {\n            saveProject(\"example\")\n          }}>save project</button> */}\n          <div className=\"EditPanel\">\n            {projects[0]!==undefined ?\n              <Editor \n                height=\"100%\"\n                defaultLanguage=\"python\"\n                theme=\"vs-dark\"\n                defaultValue=\"// comment\"\n                onChange={handleEditorChange}\n                beforeMount={() => {\n                  if(projects[0] !== undefined){\n                    projectInfo(projects[0])\n                  }\n                }}\n                value={mainCode}\n              />\n              :\n              <></>\n            }\n          </div>\n          \n        </div>\n      }\n    </div>\n  )\n\n}\n","/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/auth/index.js",[],"/home/dylan/Desktop/CompuTradePython/CompuTrade/src/components/HandleSignUp/index.js",["47","48"],"import React, {useState} from \"react\";\nimport {login, useAuth} from '../auth'\nimport {Button, Form, Modal, Container, Row, Col} from 'react-bootstrap'\nimport {FcGoogle} from 'react-icons/fc'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../../index.css'\n\nexport default function HandleSignUp(props) {\n    const [Email, setEmail] = useState('')\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [count, setCount] = useState(0)\n    const EmailPattern = new RegExp(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g)\n    const UsernamePattern = new RegExp(/[^A-z\\s\\d][\\\\\\^]?/g)\n    const [errors, setErrors] = useState({\n        email: {\n            bool: null,\n            error: \"\"\n        },\n        username: {\n            bool: null,\n            error: \"\"\n        },\n        password: {\n            bool: null,\n            error: \"\"\n        }\n    })\n    const [validated, setValidated] = useState(false)\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value)\n        if(EmailPattern.test(e.target.value) === false) {\n            setErrors((prevState) => ({\n                ...prevState,\n                email: {\n                    ...prevState.email,\n                    bool: true,\n                    error: 'Email is invalid'\n                }\n            }));\n        }\n        EmailPattern.test(e.target.value)\n        if(EmailPattern.test(e.target.value) === true) {\n            console.log(e.target.value)\n            setErrors((prevState) => ({\n                ...prevState,\n                email: {\n                    ...prevState.email,\n                    bool: false,\n                    error: ''\n                }\n            }));\n        }\n    }\n    const handleUsernameChange = (e) => {\n        setUsername(e.target.value)\n        console.log(UsernamePattern.test(e.target.value))\n        if(UsernamePattern.test(e.target.value) === true || e.target.value.length < 6) {\n            setErrors((prevState) => ({\n                ...prevState,\n                username: {\n                    ...prevState.username,\n                    bool: true,\n                    error: 'username is invalid'\n                }\n            }));\n        }else if(UsernamePattern.test(e.target.value) === false && e.target.value.length > 6) {\n            setErrors((prevState) => ({\n                ...prevState,\n                username: {\n                    ...prevState.username,\n                    bool: false,\n                    error: ''\n                }\n            }));\n        }\n    }\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value)\n        if(e.target.value.length < 8) {\n            setErrors((prevState) => ({\n                ...prevState,\n                password: {\n                    ...prevState.password,\n                    bool: true,\n                    error: 'password is not long enough'\n                }\n            }));\n        }else if(e.target.value.length > 8) {\n            setErrors((prevState) => ({\n                ...prevState,\n                password: {\n                    ...prevState.password,\n                    bool: false,\n                    error: ''\n                }\n            }));\n        }\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        event.stopPropagation()\n        setCount(count + 1)\n        if(errors.email[\"bool\"] || errors.password[\"bool\"] || errors.username[\"bool\"] || !EmailPattern.test(Email) || UsernamePattern.test(username) || username.length === 0 || Email.length === 0){\n            console.log(\"errors:\", errors)\n            console.log(EmailPattern.test(Email))\n            console.log(UsernamePattern.test(username))\n            if(username.length === 0){\n                setErrors((prevState) => ({\n                    ...prevState,\n                    username: {\n                        ...prevState.username,\n                        bool: true,\n                        error: 'username is not long enough'\n                    }\n                }));\n            }\n            if(Email.length === 0){\n                setErrors((prevState) => ({\n                    ...prevState,\n                    email: {\n                        ...prevState.email,\n                        bool: true,\n                        error: 'Email is invalid'\n                    }\n                }));\n            }\n            if(password.length === 0){\n                setErrors((prevState) => ({\n                    ...prevState,\n                    password: {\n                        ...prevState.password,\n                        bool: true,\n                        error: 'password is not long enough'\n                    }\n                }));\n            }\n            setValidated(false)\n            return\n        }\n        else {\n            const form = event.currentTarget;\n            if (form.checkValidity() === false) {\n                event.preventDefault()\n                event.stopPropagation()\n            }else {\n                event.preventDefault()\n                event.stopPropagation()\n                console.log(Email)\n                event.preventDefault()\n                console.log(\"you pressed login\")\n                let opts = {\n                    'email': Email,\n                    'username': username,\n                    'password': password\n                }\n                console.log(opts)\n                fetch('http://127.0.0.1:5000/api/signup', {\n                    method: 'post',\n                    body: JSON.stringify(opts)\n                }).then(r => r.json())\n                .then(token => {\n                    console.log(token)\n                    if(token.access_token){\n                        login({access_token: token.access_token})\n                        localStorage.setItem('username', token.username)\n                        console.log(token.username)\n                        props.onHide()\n                    }\n                    else {\n                        console.log(\"please use a different username\")\n                    }\n                })\n            }\n            setValidated(true);\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header className=\"border-0 ModalHeader\">\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Sign Up to AlgoTrader\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"ModalBody\">\n                <Button variant=\"light\"><FcGoogle /> Sign up with google</Button>\n\n                <Container>\n                    <Row>\n                        <Col><hr></hr></Col>\n                        <Col xs={1} className=\"form-seperator\">or</Col>\n                        <Col><hr></hr></Col>\n                    </Row>\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Group>\n                            <Form.Control type=\"email\"  placeholder=\"Email\" onChange={handleEmailChange} value={Email} isValid={errors.email.bool !== null && !errors.email.bool && count > 0} isInvalid={errors.email.bool && count > 0}/>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter a valid email.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control type=\"text\" placeholder=\"Choose a Username\" onChange={handleUsernameChange} value={username} isValid={errors.username.bool !== null && !errors.username.bool && count > 0} isInvalid={errors.username.bool && count > 0}/>\n                            {errors.username.bool?<Form.Control.Feedback type=\"invalid\">\n                                {errors.username.error}\n                            </Form.Control.Feedback>: <></>}\n                            <Form.Text className=\"inputDescriptor\">Your username must begin with a letter and can include numbers and underscores.</Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Control required type=\"password\" placeholder=\"Choose a Password\" onChange={handlePasswordChange} value={password} isValid={errors.password.bool !== null && !errors.password.bool && count > 0} isInvalid={errors.password.bool && count > 0} />\n                            {errors.password.bool?<Form.Control.Feedback type=\"invalid\">\n                                {errors.password.error}\n                            </Form.Control.Feedback>: <></>}\n                        <Button type=\"submit\" variant=\"success\" size=\"lg\" block>\n                            Continue\n                        </Button>\n                        </Form.Group>\n                    </Form>\n                </Container>\n\n                <Form>\n\n                </Form>\n            </Modal.Body>\n            <Modal.Footer className=\"ModalFooter\">\n                <button className=\"AnchorReplace\">Not a member yet? <span className=\"JoinSpan\" onClick={()=> {\n                    props.onHide()\n                }}>Join now</span></button>\n            </Modal.Footer>\n        </Modal>\n\n    )\n}",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":15},{"ruleId":"53","severity":1,"message":"57","line":3,"column":41,"nodeType":"55","messageId":"56","endLine":3,"endColumn":46},{"ruleId":"53","severity":1,"message":"58","line":3,"column":48,"nodeType":"55","messageId":"56","endLine":3,"endColumn":53},{"ruleId":"53","severity":1,"message":"59","line":20,"column":9,"nodeType":"55","messageId":"56","endLine":20,"endColumn":21},{"ruleId":"60","severity":1,"message":"61","line":21,"column":5,"nodeType":"62","endLine":28,"endColumn":6},{"ruleId":"53","severity":1,"message":"63","line":173,"column":10,"nodeType":"55","messageId":"56","endLine":173,"endColumn":16},{"ruleId":"53","severity":1,"message":"64","line":5,"column":9,"nodeType":"55","messageId":"56","endLine":5,"endColumn":17},{"ruleId":"53","severity":1,"message":"65","line":20,"column":12,"nodeType":"55","messageId":"56","endLine":20,"endColumn":18},{"ruleId":"53","severity":1,"message":"66","line":14,"column":10,"nodeType":"55","messageId":"56","endLine":14,"endColumn":17},{"ruleId":"53","severity":1,"message":"67","line":49,"column":9,"nodeType":"55","messageId":"56","endLine":49,"endColumn":32},{"ruleId":"53","severity":1,"message":"68","line":53,"column":12,"nodeType":"55","messageId":"56","endLine":53,"endColumn":23},{"ruleId":"53","severity":1,"message":"69","line":104,"column":9,"nodeType":"55","messageId":"56","endLine":104,"endColumn":19},{"ruleId":"60","severity":1,"message":"70","line":177,"column":17,"nodeType":"62","endLine":182,"endColumn":18},{"ruleId":"60","severity":1,"message":"70","line":197,"column":15,"nodeType":"62","endLine":199,"endColumn":19},{"ruleId":"60","severity":1,"message":"70","line":204,"column":17,"nodeType":"62","endLine":209,"endColumn":18},{"ruleId":"60","severity":1,"message":"70","line":211,"column":15,"nodeType":"62","endLine":213,"endColumn":19},{"ruleId":"53","severity":1,"message":"71","line":2,"column":16,"nodeType":"55","messageId":"56","endLine":2,"endColumn":23},{"ruleId":"72","severity":1,"message":"73","line":14,"column":54,"nodeType":"74","messageId":"75","endLine":14,"endColumn":55,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'login' is defined but never used.","Identifier","unusedVar","'Image' is defined but never used.","'Modal' is defined but never used.","'CustomToggle' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'LogOut' is defined but never used.","'FcGoogle' is defined but never used.","'logged' is assigned a value but never used.","'Message' is assigned a value but never used.","'handleProjectNameChange' is assigned a value but never used.","'saveProject' is defined but never used.","'newProject' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useAuth' is defined but never used.","no-useless-escape","Unnecessary escape character: \\^.","Literal","unnecessaryEscape",["79","80"],"no-global-assign","no-unsafe-negation",{"messageId":"81","fix":"82","desc":"83"},{"messageId":"84","fix":"85","desc":"86"},"removeEscape",{"range":"87","text":"88"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"89","text":"90"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[719,720],"",[719,719],"\\"]